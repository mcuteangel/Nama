import React, { useState, useMemo, useCallback } from "react";
import { useTranslation } from "react-i18next";
import { Type, Hash, Calendar, ListChecks, Search } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { type CustomFieldTemplate } from "@/domain/schemas/custom-field-template";
import { useToast } from "@/hooks/use-toast";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { ModernInput } from "@/components/ui/modern-input";
import { ModernSelect, ModernSelectContent, ModernSelectItem, ModernSelectTrigger, ModernSelectValue } from "@/components/ui/modern-select";
import { ModernTooltip, ModernTooltipContent, ModernTooltipTrigger } from "@/components/ui/modern-tooltip";
import useAppSettings from '@/hooks/use-app-settings';
import { useIsMobile } from '@/hooks/use-mobile';
import { designTokens } from '@/lib/design-tokens';
import CustomFieldForm from "./CustomFieldForm";
import { CustomFieldList } from "./CustomFieldList";
import { useCustomFields } from "@/hooks/use-custom-fields";
import { useCustomFieldFilters, type TemplateType } from "@/hooks/use-custom-field-filters";
import PageHeader from "@/components/ui/PageHeader";

const CustomFieldManagement: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [editingField, setEditingField] = useState<CustomFieldTemplate | null>(null);

  const { settings } = useAppSettings();
  const isMobile = useIsMobile();
  const isRTL = useMemo(() => settings.language === 'fa', [settings.language]);

  // Use custom hooks
  const { customFields, isLoading, isDeleting, deleteCustomField, handleSuccess } = useCustomFields();
  const { searchTerm, setSearchTerm, filterType, setFilterType, filteredFields } = useCustomFieldFilters(customFields);

  const handleAddSuccess = () => {
    setIsAddDialogOpen(false);
    handleSuccess();
    toast({
      title: t('custom_field_template.create_success'),
      description: t('custom_field_template.create_success_description')
    });
  };

  const handleEditSuccess = () => {
    setIsEditDialogOpen(false);
    setEditingField(null);
    handleSuccess();
    toast({
      title: t('custom_field_template.update_success'),
      description: t('custom_field_template.update_success_description')
    });
  };

  const handleEditClick = (field: CustomFieldTemplate) => {
    setEditingField(field);
    setIsEditDialogOpen(true);
  };

  const handleDeleteClick = async (id: string) => {
    await deleteCustomField(id);
  };

  const handleAddFieldClick = useCallback(() => {
    setIsAddDialogOpen(true);
  }, []);

  const handleSearchChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(event.target.value);
  }, [setSearchTerm]);

  const handleFilterChange = (value: TemplateType | "all") => {
    setFilterType(value);
  };

  // Get available field types for filter
  const availableTypes = useMemo(() => {
    const types = new Set<TemplateType>();
    customFields.forEach(field => {
      if (field.type) {
        types.add(field.type as TemplateType);
      }
    });
    return Array.from(types);
  }, [customFields]);

  return (
    <div
      className={`min-h-screen w-full ${settings.theme === 'dark' ? 'dark' : ''}`}
      style={{
        background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',
        padding: designTokens.spacing[6]
      }}
      dir={isRTL ? 'rtl' : 'ltr'}
    >
      <div className="max-w-7xl mx-auto space-y-6">
        <div className="space-y-6">
          <PageHeader
            title={t('custom_field_management.title')}
            description={t('custom_field_management.description')}
            onAddClick={handleAddFieldClick}
            addButtonLabel={t('custom_field_management.add_field')}
            showBackButton={true}
          />
          
          <div className="flex flex-col md:flex-row gap-4 items-center justify-between">
            <div className="relative w-full md:max-w-md">
              <ModernInput
                type="text"
                placeholder={t('common.search_placeholder')}
                className="pl-10 pr-4 py-2.5 rounded-xl bg-white/50 dark:bg-gray-800/50 border border-gray-200 dark:border-gray-700 focus:ring-2 focus:ring-blue-500/30 focus:border-blue-500 transition-all duration-200 w-full"
                style={{
                  fontSize: designTokens.typography.sizes.sm,
                  boxShadow: designTokens.shadows.glass,
                  backdropFilter: 'blur(10px)'
                }}
                value={searchTerm}
                onChange={handleSearchChange}
              />
              <Search
                className="absolute left-4 top-1/2 transform -translate-y-1/2"
                size={18}
                style={{ color: designTokens.colors.gray[500] }}
              />
            </div>
            
            <div className="w-full md:w-auto">
              <ModernTooltip>
                <ModernTooltipTrigger asChild>
                  <div className="flex items-center gap-2">
                    <ModernSelect onValueChange={handleFilterChange} value={filterType || "all"}>
                      <ModernSelectTrigger className="w-full sm:w-48">
                        <ModernSelectValue placeholder={t('common.filter_by_type')} />
                      </ModernSelectTrigger>
                      <ModernSelectContent>
                        <ModernSelectItem value="all">
                          {t('common.all_types')}
                        </ModernSelectItem>
                        {availableTypes.map((type) => (
                          <ModernSelectItem key={type} value={type}>
                            <div className="flex items-center gap-2">
                              {type === 'text' && <Type size={16} />}
                              {type === 'number' && <Hash size={16} />}
                              {type === 'date' && <Calendar size={16} />}
                              {type === 'select' && <ListChecks size={16} />}
                              {t(`custom_field_types.${type}`, type)}
                            </div>
                          </ModernSelectItem>
                        ))}
                      </ModernSelectContent>
                    </ModernSelect>
                  </div>
                </ModernTooltipTrigger>
                <ModernTooltipContent>
                  <p>{t('custom_field_management.filter_by_type')}</p>
                </ModernTooltipContent>
              </ModernTooltip>
            </div>
          </div>

          {/* Fields List Section */}
          <div className="mt-6">
            <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden">
              <CustomFieldList
                fields={filteredFields}
                isLoading={isLoading}
                isDeleting={isDeleting}
                onEdit={handleEditClick}
                onDelete={handleDeleteClick}
                onAddNew={() => setIsAddDialogOpen(true)}
              />
            </div>
          </div>
        </div>

        {/* Add Field Dialog */}
        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
          <DialogContent className="sm:max-w-[600px] p-0 border-none bg-transparent shadow-none">
            <DialogHeader className="sr-only">
              <DialogTitle>{t('custom_field_template.add_title')}</DialogTitle>
            </DialogHeader>
            <CustomFieldForm
              onSuccess={handleAddSuccess}
              onCancel={() => setIsAddDialogOpen(false)}
            />
          </DialogContent>
        </Dialog>

        {/* Edit Field Dialog */}
        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
          <DialogContent className="sm:max-w-[600px] p-0 border-none bg-transparent shadow-none">
            <DialogHeader className="sr-only">
              <DialogTitle>{t('custom_field_template.edit_title')}</DialogTitle>
            </DialogHeader>
            {editingField && (
              <CustomFieldForm
                initialData={editingField}
                onSuccess={handleEditSuccess}
                onCancel={() => {
                  setIsEditDialogOpen(false);
                  setEditingField(null);
                }}
              />
            )}
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
};

export default CustomFieldManagement;
