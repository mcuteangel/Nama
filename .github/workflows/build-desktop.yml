name: Build Tauri Desktop App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-web:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build web app
      run: pnpm run build

    - name: Upload web build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: dist/

  build-tauri:
    runs-on: ubuntu-latest
    needs: build-web
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Download web build artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-build
        path: dist/

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-unknown-linux-gnu

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Build Tauri app for Linux
      run: pnpm run tauri:build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare release package
      shell: bash
      run: |
        # ایجاد پوشه ریلیز
        mkdir -p release

        # پیدا کردن فایل ساخته شده
        find src-tauri/target/release/bundle -name "*.AppImage" -o -name "*.deb" | head -1 | xargs -I {} cp {} release/

        # نمایش فایل‌های ساخته شده
        ls -la release/

        # ذخیره نام فایل برای استفاده بعدی
        echo "RELEASE_FILE=$(ls release/ | head -1)" >> $GITHUB_ENV

    - name: Upload release package
      uses: actions/upload-artifact@v4
      with:
        name: tauri-release-package
        path: release/
        retention-days: 1

  build-tauri-windows:
    runs-on: windows-latest
    needs: [build-web, build-tauri]
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Download web build artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-build
        path: dist/

    - name: Install system dependencies
      shell: powershell
      run: |
        # Install WebView2 and other dependencies
        choco install webview2-runtime -y

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Build Tauri app for Windows
      run: pnpm run tauri:build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare release package
      shell: powershell
      run: |
        # ایجاد پوشه ریلیز
        $releaseDir = "$env:GITHUB_WORKSPACE\release"
        New-Item -ItemType Directory -Force -Path $releaseDir

        # پیدا کردن فایل ساخته شده
        $msiFile = Get-ChildItem -Path "src-tauri\target\release\bundle\msi" -Filter "*.msi" | Select-Object -First 1
        if ($msiFile) {
          Copy-Item -Path $msiFile.FullName -Destination "$releaseDir\"
        }

        # نمایش فایل‌های ساخته شده
        Get-ChildItem -Path $releaseDir

        # ذخیره نام فایل برای استفاده بعدی
        $releaseFile = Get-ChildItem -Path $releaseDir | Select-Object -First 1
        echo "RELEASE_FILE=$($releaseFile.Name)" >> $env:GITHUB_ENV

    - name: Upload release package
      uses: actions/upload-artifact@v4
      with:
        name: tauri-windows-release-package
        path: release/
        retention-days: 1

  build-tauri-macos:
    runs-on: macos-latest
    needs: [build-web, build-tauri-windows]
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Download web build artifacts
      uses: actions/download-artifact@v4
      with:
        name: web-build
        path: dist/

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-apple-darwin

    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Build Tauri app for macOS
      run: pnpm run tauri:build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare release package
      shell: bash
      run: |
        # ایجاد پوشه ریلیز
        mkdir -p release

        # پیدا کردن فایل ساخته شده
        find src-tauri/target/release/bundle -name "*.dmg" -o -name "*.app" | head -1 | xargs -I {} cp -r {} release/

        # نمایش فایل‌های ساخته شده
        ls -la release/

        # ذخیره نام فایل برای استفاده بعدی
        echo "RELEASE_FILE=$(ls release/ | head -1)" >> $GITHUB_ENV

  release:
    runs-on: ubuntu-latest
    needs: [build-tauri-windows, build-tauri-macos]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # برای دسترسی به تاریخچه

    - name: Generate tag name
      id: tag
      run: |
        # ایجاد نام تگ بر اساس تاریخ و زمان
        TAG_NAME="v$(date +'%Y%m%d%H%M%S')"
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

    - name: Create and push tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag ${{ env.TAG_NAME }}
        git push origin ${{ env.TAG_NAME }}

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}
        files: |
          tauri-release-package/*
          tauri-windows-release-package/*
          tauri-macos-release-package/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
